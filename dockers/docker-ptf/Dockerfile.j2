{% set prefix = DEFAULT_CONTAINER_REGISTRY %}
{% if CONFIGURED_ARCH == "armhf" and MULTIARCH_QEMU_ENVIRON == "y" %}
FROM {{ prefix }}multiarch/debian-debootstrap:armhf-stretch
{% elif CONFIGURED_ARCH == "arm64" and MULTIARCH_QEMU_ENVIRON == "y" %}
FROM {{ prefix }}multiarch/debian-debootstrap:arm64-stretch
{% elif PTF_ENV_PY_VER == "mixed" %}
FROM {{ prefix}}debian:buster
{% else %}
FROM {{ prefix }}debian:bullseye
{% endif %}

{% from "dockers/dockerfile-macros.j2" import install_python_wheels, copy_files, install_offending_packages %}
{% from "dockers/dockerfile-macros.j2" import apt_install, apt_install_for_img %}
{% from "dockers/dockerfile-macros.j2" import pip3_install, pip_install, pip3_install_for_img, pip_install_for_img %}

USER root
WORKDIR /root

LABEL maintainer="Pavel Shirshov"

COPY ["sources.list.{{ CONFIGURED_ARCH }}", "/etc/apt/sources.list"]
COPY ["no-check-valid-until", "/etc/apt/apt.conf.d"]
COPY ["apt-retries-count", "/etc/apt/apt.conf.d"]

## Make apt-get non-interactive
ENV DEBIAN_FRONTEND=noninteractive

## Set the apt source, update package cache and install necessary packages
## TODO: Clean up this step
RUN apt-get update          \
    && apt-get upgrade -y   \
    && apt-get dist-upgrade -y

# install debian packages common to both 'mixed' (buster) and 'py3' (bullseye) images
{% set apt_packages = [ 'autoconf', 'openssh-server', 'vim', 'telnet', 'net-tools', 'traceroute',
'lsof', 'tcpdump', 'ethtool', 'unzip', 'pkg-config', 'binutils',
'build-essential', 'libssl-dev', 'libffi-dev', 'wget', 'cmake',
'libqt5core5a', 'libqt5network5', 'less', 'git', 'iputils-ping',
'hping3', 'curl', 'tmux', 'python3', 'python3', 'python3-venv',
'python3-pip', 'python3-dev', 'python3-scapy', 'python3-six',
'libpcap-dev', 'rsyslog', 'ntp', 'ntpstat', 'ntpdate', 'arping',
'bridge-utils', 'libteam-utils', 'gdb', 'automake', 'iproute2',
'wireshark-common' ] %}
{{ apt_install(apt_packages) }}

# install debian packages specific to mixed image type (buster)
{% set apt_mixed_packages = [ 'libboost-atomic1.71.0', 'python',
'python-dev', 'python-libpcap', 'python-scapy', 'python-six', 'tacacs+' ] %}
{{ apt_install_for_img(apt_mixed_packages, PTF_ENV_PY_VER, 'mixed') }}

# install debian packages specific to py3 image type (bullseye)
{% set apt_py3_packages = [ 'libboost-atomic1.74.0', 'flex',
'bison', 'tcpd', 'libwrap0', 'libwrap0-dev' ] %}
{{ apt_install_for_img(apt_py3_packages, PTF_ENV_PY_VER, 'py3') }}

{% if PTF_ENV_PY_VER == "py3" %}
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1 \
    && update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1 \
    && update-alternatives --install /usr/bin/pdb pdb /usr/bin/pdb3 1 \
    && update-alternatives --install /usr/bin/pydoc pydoc /usr/bin/pydoc3 1 \
    && update-alternatives --install /usr/bin/pygettext pygettext /usr/bin/pygettext3 1
{% endif %}

RUN rm -rf /debs \
    && apt-get -y autoclean \
    && apt-get -y autoremove \
    && rm -rf /var/lib/apt/lists/* \
    && git clone https://github.com/sflow/sflowtool \
    && cd sflowtool \
    && git checkout v6.04 \
    && ./boot.sh \
    && ./configure \
    && make \
    && make install \
    && cd  .. \
    && rm -fr sflowtool \
    && git clone https://github.com/dyninc/OpenBFDD.git \
    && cd OpenBFDD \
    && ./autogen.sh \
    && ./configure \
    && make \
    && make install \
    && cd  .. \
    && rm -fr OpenBFDD \
    && wget https://github.com/nanomsg/nanomsg/archive/1.0.0.tar.gz \
    && tar xvfz 1.0.0.tar.gz \
    && cd nanomsg-1.0.0    \
    && mkdir -p build      \
    && cd build            \
    && cmake ..            \
    && make install        \
    && ldconfig            \
    && cd ../..            \
    && rm -fr nanomsg-1.0.0 \
    && rm -f 1.0.0.tar.gz  \
    && mkdir -p /opt       \
    && cd /opt             \
    && wget https://raw.githubusercontent.com/p4lang/ptf/master/ptf_nn/ptf_nn_agent.py

{% if PTF_ENV_PY_VER == "mixed" %}
    RUN git clone https://github.com/p4lang/scapy-vxlan.git \
    && cd scapy-vxlan \
    && python setup.py install \
    && cd .. \
    && rm -fr scapy-vxlan \
    && wget --https-only https://bootstrap.pypa.io/pip/2.7/get-pip.py \
    && python get-pip.py \
    && rm -f get-pip.py
{% endif %}

{% set pip_packages_mixed = [ 'setuptools', 'supervisor', 'ipython==5.4.1', 'cffi', 'nnpy'
'dpkt', 'ipaddress', 'pysubnettree', 'paramiko', 'flask',
'exabgp==3.4.17', 'pyaml', 'pybrctl', 'pyro4', 'rpyc',
'yabgp', 'unittest-xml-reporting', 'pyrasite', 'retrying' ] %}
{{ pip_install_for_img(pip_packages_mixed, PTF_ENV_PY_VER, 'mixed') }}


{% if PTF_ENV_PY_VER == "mixed" %}
RUN wget --https-only https://bootstrap.pypa.io/pip/get-pip.py \
    && python3 get-pip.py \
    && rm -f get-pip.py   \
    && git clone https://github.com/facebook/tac_plus \
    && cd tac_plus \
    && cd tacacs-F4.0.4.28 \
    && ./configure \
    && make install \
    && ln -s /usr/local/sbin/tac_plus /usr/sbin/tac_plus \
    && ln -s /usr/local/bin/tac_pwd /usr/sbin/tac_pwd \
    && mkdir /etc/tacacs+ \
    && chmod 0755 /etc/tacacs+
COPY ["tacacs_plus", "/etc/init.d"]
COPY ["tacacs+", "/etc/default"]
{% endif %}


##
# Setup and activate virtual environment (applicable to mixed image only)
# Python 3 related installs after this step go into the virtual environment
##
{% if PTF_ENV_PY_VER == "mixed" %}
RUN python3 -m venv --system-site-packages env-python3
ENV VIRTUAL_ENV=/root/env-python3
ARG BACKUP_OF_PATH="$PATH"
ENV PATH="$VIRTUAL_ENV/bin:$PATH"
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8 PYTHONIOENCODING=UTF-8
RUN python3 -m pip install --upgrade --ignore-installed pip
{% endif %}

# For py3 image the offending packages below do not use the updated 
# setuptools on Python 3.9. The packages downgrade setuptools 
# to 40.x causing further installations to fail
{% set pkgs = ["supervisor", "ipython==5.4.1", "exabgp", "grpcio-tools==1.41.1"] %}
{% if PTF_ENV_PY_VER == "py3" %}
{{ install_offending_packages(pkgs) }}
{% else %}
{{ pip3_install(pkgs) }}
{% endif %}

# In the old/mixed image environment the exabgp process API
# uses the old flask package and runs in a Python 2 environment.
# In the new/py3 image Flask 3.0.3 and Werkzeug 3.1.2 are used.
# Werkzeug 3.1.3 ignores Request.max_form_memory_size setting
# the bug causes announce routes to fail by returning 413
# (Request Entity Too Large). Hence using Werkzeug 3.1.2
{% set pip3_packages_py3 = [ 'Flask==3.0.3', 'Werkzeug==3.1.2' ] %}
{{ pip3_install_for_img(pip3_packages_py3, PTF_ENV_PY_VER, 'py3') }}

# These packages are installed in virtual environment on mixed image and
# in global environment on py3 image
{% set pip3_packages_common = [ 'Cython', 'cffi', 'nnpy', 'dpkt', 'ipaddress',
'pysubnettree', 'paramiko', 'pyaml', 'pybrctl', 'pyro4', 'rpyc',
'unittest-xml-reporting', 'pyrasite', 'python-libpcap', 'itsdangerous',
'retrying', 'jinja2', 'scapy==2.5.0', 'thrift' ] %}
{{ pip3_install(pip3_packages_common) }}

# Following packages are required for GNMI 
# https://github.com/lguohan/gnxi/blob/master/gnmi_cli_py/requirements.txt
# Install them for 'py3' without futures and as-is for 'mixed'
{% set gnmi_cli_py_reqs = [ 'enum34==1.1.6', 'grpcio==1.41.1', 'protobuf==3.6.1', 'six==1.12.0' ] %}
{{ pip3_install_for_img(gnmi_cli_py_reqs, PTF_ENV_PY_VER, 'py3') }}
{{ pip_install_for_img(gnmi_cli_py_reqs, PTF_ENV_PY_VER, 'mixed') }}
{{ pip_install_for_img(['futures==3.2.0'], PTF_ENV_PY_VER, 'mixed') }}

{% if docker_ptf_whls.strip() -%}
# Copy locally-built Python wheel dependencies
{{ copy_files("python-wheels/", docker_ptf_whls.split(' '), "/python-wheels/") }}

# Install locally-built Python wheel dependencies
{{ install_python_wheels(docker_ptf_whls.split(' ')) }}
{% endif %}

{% if PTF_ENV_PY_VER == "mixed" %}
# Deactivating a virtualenv.
ENV PATH="$BACKUP_OF_PATH"
{% endif %}

## Adjust sshd settings
RUN mkdir /var/run/sshd \
    && echo 'root:root' | chpasswd \
    && sed -ri '/^#?PermitRootLogin/c\PermitRootLogin yes' /etc/ssh/sshd_config \
    && sed -ri '/^#?UsePAM/c\UsePAM no' /etc/ssh/sshd_config \
    && sed -ri '/^#?UseDNS/c\UseDNS no' /etc/ssh/sshd_config

COPY supervisord.conf /etc/supervisor/
COPY conf.d/ /etc/supervisor/conf.d/
COPY ptf_tgen.sh /ptf_tgen/

{% if PTF_ENV_PY_VER == "mixed" %}
# Move tcpdump into /usr/bin Otherwise it's impossible to run tcpdump due to a docker bug
RUN mv /usr/sbin/tcpdump /usr/bin/tcpdump
RUN ln -s /usr/bin/tcpdump /usr/sbin/tcpdump
{% endif %}

RUN mkdir -p /var/log/supervisor

# Install Python-based GNMI client
RUN git clone https://github.com/lguohan/gnxi.git \
    && cd gnxi \
    && git checkout 3adf8b9 \
    && cd gnmi_cli_py \
{% if PTF_ENV_PY_VER == "mixed" %}
    && pip install -r requirements.txt
{% else %}
    && cat requirements.txt | grep -v futures > /tmp/requirements.txt \
    && pip3 install -r /tmp/requirements.txt
{% endif %}

COPY \
{% for deb in docker_ptf_debs.split(' ') -%}
debs/{{ deb }}{{' '}}
{%- endfor -%}
debs/

RUN dpkg -i \
{% for deb in docker_ptf_debs.split(' ') -%}
debs/{{ deb }}{{' '}}
{%- endfor %}

{% if PTF_ENV_PY_VER == "py3" %}
# Create symlink so that test scripts and ptf_runner invocation path
# is same across python 2 and python 3 envs. Note that for virtual-env 
# ptf is under /root/env-python3/bin. 
# TODO - cleanup when the supported PTF image is py3only across all branches
RUN mkdir -p /root/env-python3/bin \
    && ln -s /usr/local/bin/ptf /usr/bin/ptf \
    && ln -s /usr/bin/python /root/env-python3/bin/python3 \
    && ln -s /usr/bin/python /root/env-python3/bin/python \
    && ln -s /usr/local/bin/ptf /root/env-python3/bin/ptf
{% endif %}

COPY ["*.ini", "/etc/ptf/"]
EXPOSE 22 8009

ENTRYPOINT ["/usr/local/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]