# The azure pipeline template for PR build, Official build, and upgrade version build

parameters:
- name: 'jobFilters'
  type: object
  default: ''
- name: 'preSteps'
  type: stepList
  default: []
- name: 'buildSteps'
  type: stepList
  default: []
- name: 'postSteps'
  type: stepList
  default: []
- name: jobGroups
  type: object
  default: []
- name: jobVariables
  type: object
  default: []
- name: SUBMODULE
  type: string
  default: ''
- name: COMMIT_ID
  type: string
  default: ''
jobs:
- template: azure-pipelines-job-groups.yml
  parameters:
    jobFilters: ${{ parameters.jobFilters }}
    jobVariables: ${{ parameters.jobVariables }}
    preSteps:
      - template: .azure-pipelines/cleanup.yml@buildimage
      - ${{ parameters.preSteps }}
      - script: |
          [ -n "$OVERRIDE_BUILD_OPTIONS" ] && OVERRIDE_BUILD_OPTIONS=$(OVERRIDE_BUILD_OPTIONS)
          BUILD_OPTIONS="$(BUILD_OPTIONS) $OVERRIDE_BUILD_OPTIONS"
          if [ -n "$(CACHE_MODE)" ] && echo $(PLATFORM_AZP) | grep -E -q "^(vs|broadcom|mellanox|marvell-prestera-armhf|marvell-prestera-arm64|vpp)$"; then
            CACHE_OPTIONS="SONIC_DPKG_CACHE_METHOD=$(CACHE_MODE) SONIC_DPKG_CACHE_SOURCE=/nfs/dpkg_cache/$(PLATFORM_AZP)"
            BUILD_OPTIONS="$BUILD_OPTIONS $CACHE_OPTIONS"
          fi
          echo $BUILD_OPTIONS
          echo "##vso[task.setvariable variable=BUILD_OPTIONS]$BUILD_OPTIONS"
        displayName: "Set cache options"
      - checkout: self
        submodules: recursive
        fetchDepth: 0
        condition: and(succeeded(), eq(variables.SKIP_CHECKOUT, ''))
        displayName: 'Checkout code'
      - script: |
          if [ -n "${{ parameters.COMMIT_ID }}" ]; then
            if [ -n "${{ parameters.SUBMODULE }}" ]; then
              git submodule update --init --recursive
              cd src/${{ parameters.SUBMODULE }}
            fi
            git checkout ${{ parameters.COMMIT_ID }}
          else
            echo "No specific commit id provided, checkout to latest commit"
          fi
        displayName: 'Checkout commit'
      - script: |
          set -x
          sudo setfacl -R -b $(Agent.BuildDirectory)
        displayName: 'setfacl'
      - script: |
          BRANCH_NAME=$(Build.SourceBranchName)
          [ -n "$SYSTEM_PULLREQUEST_PULLREQUESTID" ] && BRANCH_NAME="$SYSTEM_PULLREQUEST_TARGETBRANCH-$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER"
          git checkout -b $BRANCH_NAME
          sudo modprobe overlay
          sudo apt-get install -y acl
          sudo bash -c "echo 1 > /proc/sys/vm/compact_memory"
          [ -z "$PLATFORM_NAME" ] && PLATFORM_NAME=$(PLATFORM_AZP)
          ENABLE_DOCKER_BASE_PULL=y make PLATFORM=$PLATFORM_NAME PLATFORM_ARCH=$(PLATFORM_ARCH) $(BUILD_OPTIONS) configure
        displayName: 'Make configure'
    postSteps:
      - script: |
          BUILD_REASON=$(Build.Reason)
          echo "Build.Reason = $BUILD_REASON"
          echo "Build.DefinitionName = $BUILD_DEFINITIONNAME"
          echo "GROUP_NAME = $(GROUP_NAME)"

          # Check if docker-ptf Dockerfile.j2 has changed for PR builds
          PTF_DOCKERFILE_CHANGED=false
          PTF_IMAGE_TAG=""

          if [[ "$BUILD_REASON" == "PullRequest" ]]; then
            echo "Checking for changes to dockers/docker-ptf/Dockerfile.j2 in PR..."

            # Get the target branch and check for changes
            TARGET_BRANCH="origin/$(System.PullRequest.TargetBranch)"
            echo "Comparing against target branch: $TARGET_BRANCH"

            # Fetch target branch to ensure we have the latest
            git fetch origin $(System.PullRequest.TargetBranch)

            # Check if docker-ptf Dockerfile.j2 has changes
            if git diff --name-only $TARGET_BRANCH...HEAD | grep -q "dockers/docker-ptf/Dockerfile.j2"; then
              echo "docker-ptf/Dockerfile.j2 has been modified in this PR"
              PTF_DOCKERFILE_CHANGED=true
              PTF_IMAGE_TAG="pr-$(System.PullRequest.PullRequestNumber)-$(Build.BuildId)"
              echo "PTF_IMAGE_TAG set to: $PTF_IMAGE_TAG"
              echo "##vso[task.setvariable variable=PTF_IMAGE_TAG;isOutput=true]$PTF_IMAGE_TAG"
            else
              echo "docker-ptf/Dockerfile.j2 has not been modified in this PR"
              echo "##vso[task.setvariable variable=PTF_IMAGE_TAG;isOutput=true]"
            fi
          else
            echo "Not a PR build, setting empty PTF_IMAGE_TAG"
            echo "##vso[task.setvariable variable=PTF_IMAGE_TAG;isOutput=true]"
          fi

          # Original logic for master branch builds
          if [[ "$BUILD_REASON" != "PullRequest" && "$BUILD_DEFINITIONNAME" == "Azure.sonic-buildimage.official.vs" ]]
          then
            PORT=443
            DOCKERS=$(ls target/docker-ptf.gz)
            BRANCH=$(Build.SourceBranchName)
            echo "Branch = $BRANCH"
            LABELS="$BRANCH"
            [[ "$BRANCH" == "master" ]] && LABELS="$LABELS latest"
            for f in $DOCKERS; do
              echo $f
              echo "Labels = $LABELS"
              ./push_docker.sh $f $(REGISTRY_SERVER_PUBLIC) $PORT $(REGISTRY_USERNAME) "$REGISTRY_PASSWD" "$LABELS"
            done
          fi

          # Push docker-ptf for PR builds if Dockerfile.j2 changed
          if [[ "$BUILD_REASON" == "PullRequest" && "$PTF_DOCKERFILE_CHANGED" == "true" && "$(GROUP_NAME)" == "vs" ]]; then
            PORT=443
            DOCKERS=$(ls target/docker-ptf.gz 2>/dev/null || echo "")
            if [[ -n "$DOCKERS" ]]; then
              # Safety check: Ensure PTF_IMAGE_TAG starts with "pr-" to prevent overwriting release tags
              if [[ "$PTF_IMAGE_TAG" == pr-* ]]; then
                echo "Pushing docker-ptf.gz with tag: $PTF_IMAGE_TAG"
                for f in $DOCKERS; do
                  echo "Pushing $f with tag $PTF_IMAGE_TAG"
                  ./push_docker.sh $f $(REGISTRY_SERVER_PUBLIC) $PORT $(REGISTRY_USERNAME) "$REGISTRY_PASSWD" "$PTF_IMAGE_TAG"
                done
                echo "Successfully pushed docker-ptf.gz with tag: $PTF_IMAGE_TAG"
              else
                echo "ERROR: PTF_IMAGE_TAG '$PTF_IMAGE_TAG' does not start with 'pr-'. Skipping push."
              fi
            else
              echo "WARNING: No docker-ptf.gz found to push. Check build step"
            fi
          fi

          mkdir -p $(Build.ArtifactStagingDirectory)/target
          mv target/* $(Build.ArtifactStagingDirectory)/target/
        name: PublishAndSetPtfTag
        env:
          REGISTRY_PASSWD: $(REGISTRY_PASSWD)
        displayName: Publish to Docker Registry and Copy Artifacts
        condition: always()
      - publish:  $(Build.ArtifactStagingDirectory)
        artifact: 'sonic-buildimage.$(GROUP_NAME)$(GROUP_EXTNAME)'
        displayName: "Archive sonic image"
      - publish:  $(Build.ArtifactStagingDirectory)
        condition: or(failed(), canceled())
        artifact: 'sonic-buildimage.$(GROUP_NAME)$(GROUP_EXTNAME)$(System.JobAttempt)'
        displayName: "Archive failed sonic image"
      - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
        - template: trigger-publish-artifacts-build.yml
          parameters:
            artifactName: 'sonic-buildimage.$(GROUP_NAME)$(GROUP_EXTNAME)'
            publishPrefix: '$(Build.DefinitionName)/$(Build.SourceBranchName)/$(GROUP_NAME)'
      - ${{ parameters.postSteps }}
      - template: .azure-pipelines/cleanup.yml@buildimage
    jobGroups: ${{ parameters.jobGroups }}
    buildSteps: ${{ parameters.buildSteps }}
